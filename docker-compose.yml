version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: telemetry-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: telemetry_learning
      MYSQL_USER: telemetry_user
      MYSQL_PASSWORD: telemetry_pass
    volumes:
      - mysql_data:/var/lib/mysql
      - ./config/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - telemetry-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: telemetry-jaeger
    ports:
      - "16686:16686"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - telemetry-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: telemetry-otel-collector
    command: ["--config=/etc/otelcol-contrib/otel-collector.yml"]
    volumes:
      - ./config/otel-collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    depends_on:
      - jaeger
      - prometheus
    networks:
      - telemetry-network

  # Prometheus for metrics storage
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: telemetry-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - telemetry-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: telemetry-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - telemetry-network

  # üìù ELK STACK FOR LOG MANAGEMENT
  
  # Elasticsearch - Log Storage & Search Engine
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: telemetry-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - telemetry-network

  # Kibana - Log Query Interface & Analytics
  kibana:
    image: kibana:8.11.0
    container_name: telemetry-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
    depends_on:
      - elasticsearch
    networks:
      - telemetry-network

  # FluentBit - Lightweight Log Shipper (Tails stdout/stderr)
  fluentbit:
    image: fluent/fluent-bit:2.2.0
    container_name: telemetry-fluentbit
    volumes:
      - ./config/fluentbit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./config/fluentbit/parsers.conf:/fluent-bit/etc/parsers.conf
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    networks:
      - telemetry-network

volumes:
  mysql_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  telemetry-network:
    driver: bridge
